import Foundation
/// **122. 买卖股票的最佳时机 II**
/// 给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
/// 在每一天，你可以决定是否购买和/或出售股票。你在任何时候**最多**只能持有**一股**股票。你也可以先购买，然后在**同一天**出售。
/// 返回你能获得的**最大利润**。
///
/// **示例**
/// 输入：prices = [7,1,5,3,6,4]
/// 输出：7
/// 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出,
/// 这笔交易所能获得利润 = 5 - 1 = 4 。随后，在第 4 天（股票价格 = 3）的时候买入，
/// 在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
/// 总利润为 4 + 3 = 7 。
class Solution {
    func maxProfit(_ prices: [Int]) -> Int {
        let N: Int = prices.count
        /// **本题由于可以先卖后再买因此需要使用二维dp，用于表示是否在前几天卖了股票。**
        /// **dp的含义**
        ///     - dp[i][0]表示第i-1天交易完成之后手里没有股票情况下的最大利润，则dp[1][0] = 0
        ///     - dp[i][1]表示第i-1天交易完成之后手里持有一股情况下的最大利润
        /// **dp转移方程**
        ///     - 第i-1天交易完成之后手里没有股票情况下的最大利润 = MAX(第i-2天交易完成之后手里没有股票情况下的最大利润, 第i-2天交易完成之后手里有一股股票情况下并将其卖了之后的最大利润)
        ///     - dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i-1])
        ///     - 第i-1天交易完成之后手里持有一股情况下的最大利润 = max(第i-2天交易完成之后手里持有一股情况下的最大利润, 第i-2天交易完成之后手里没有股票情况下并买入当天股票后的最大利润)
        ///     - dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i-1])
        var dp: [[Int]] = Array(repeating: Array(repeating: 0, count: 2), count: N + 1)
        for i in 1...N {
            if i == 1 {
                dp[i][0] = 0
                dp[i][1] = -prices[i-1]
            } else {
                dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i-1])
                dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i-1])
            }
        }
        return dp[N][0]
    }
}

let solution = Solution()
print(solution.maxProfit([7,1,5,3,6,4]))
print(solution.maxProfit([1,2,3,4,5]))
print(solution.maxProfit([7,6,5,3,1]))
